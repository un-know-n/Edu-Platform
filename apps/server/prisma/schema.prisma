generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  providerAccountId String
  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                String              @id @default(cuid())
  name              String
  description       String?
  email             String              @unique
  emailVerified     DateTime?
  password          String?
  role              String?
  image             String?
  createdAt         DateTime            @default(now())
  accounts          Account[]
  VerificationToken VerificationToken[]
  createdCourses    Course[]

  UsersAssignedToCourse UsersAssignedToCourse[]
  FavoriteCourses       FavoriteCourses[]
}

model VerificationToken {
  token   String?  @unique @default(cuid())
  expires DateTime
  id      String   @id @default(cuid())
  userId  String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([id, token])
}

model Category {
  id     Int      @id @default(autoincrement())
  title  String
  course Course[]
}

model Course {
  id                     String    @id @default(cuid())
  title                  String
  purpose                String
  description            String
  creatorId              String
  categoryId             Int?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt @default(now())
  timeToPass             Int
  image                  String?
  difficultyLevel        Int
  numberOfPeopleEnrolled Int       @default(0)
  sections               Section[]

  user                  User                    @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category              Category?               @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  UsersAssignedToCourse UsersAssignedToCourse[]
  FavoriteCourses       FavoriteCourses[]
}

model Section {
  id        String    @id @default(cuid())
  title     String
  courseId  String
  createdAt DateTime  @default(now())
  lectures  Lecture[]
  tests     Test[]

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Lecture {
  id        String   @id @default(cuid())
  title     String
  content   String
  videoUrl  String?
  createdAt DateTime @default(now())
  sectionId String

  section Section @relation(fields: [sectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Test {
  id            String       @id @default(cuid())
  title         String
  timeToPass    Int          @default(60000)
  totalAttempts Int          @default(2)
  createdAt     DateTime     @default(now())
  questions     Question[]
  sectionId     String
  testResult    TestResult[]

  section Section @relation(fields: [sectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Question {
  id               String   @id @default(cuid())
  text             String
  points           Int
  isMultipleChoice Boolean
  answers          Answer[]
  testId           String

  test Test @relation(fields: [testId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Answer {
  id         String  @id @default(cuid())
  text       String
  questionId String
  isCorrect  Boolean

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model TestResult {
  id             String  @id @default(cuid())
  score          Int     @default(0)
  isCompleted    Boolean @default(false)
  currentAttempt Int
  enrollmentId   String
  testId         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  UsersAssignedToCourse UsersAssignedToCourse @relation(fields: [enrollmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  test Test @relation(fields: [testId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UsersAssignedToCourse {
  id          String       @id @default(cuid())
  userId      String
  courseId    String
  assignedAt  DateTime     @default(now())
  updatedAt   DateTime     @updatedAt @default(now())
  expiresAt   DateTime
  isCompleted Boolean      @default(false)
  isFailed    Boolean      @default(false)
  testResult  TestResult[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model FavoriteCourses {
  id       String @id @default(cuid())
  userId   String
  courseId String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
