generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  providerAccountId String
  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                String              @id @default(cuid())
  name              String
  email             String              @unique
  emailVerified     DateTime?
  password          String?
  role              String?
  image             String?
  accounts          Account[]
  VerificationToken VerificationToken[]
  createdCourses    Course[]

  UsersAssignedToCourse UsersAssignedToCourse[]
}

model VerificationToken {
  token   String?  @unique @default(cuid())
  expires DateTime
  id      String   @id @default(cuid())
  userId  String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([id, token])
}

model UsersAssignedToCourse {
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String
  course        Course   @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId      String
  createdAt     DateTime @default(now())
  expiresAt     DateTime
  isCompleted   Boolean
  test          Test     @relation(fields: [currentTestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  currentTestId String

  @@id([userId, courseId, currentTestId])
}

model Course {
  id                     String   @id @default(cuid())
  title                  String
  description            String
  creatorId              String
  difficultyLevel        Int
  numberOfPeopleEnrolled Int
  modules                Module[]

  user                  User                    @relation(fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  UsersAssignedToCourse UsersAssignedToCourse[]
}

model Module {
  id       String    @id @default(cuid())
  title    String
  courseId String
  lections Lection[]
  test     Test?

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Lection {
  id       String @id @default(cuid())
  title    String
  content  String
  moduleId String

  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Test {
  id        String     @id @default(cuid())
  questions Question[]
  moduleId  String     @unique

  module                Module                  @relation(fields: [moduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  UsersAssignedToCourse UsersAssignedToCourse[]
}

model Question {
  id             String   @id @default(cuid())
  text           String
  test           Test     @relation(fields: [testId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  testId         String
  multipleChoice Boolean
  answers        Answer[]
}

model Answer {
  id         String   @id @default(cuid())
  text       String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionId String
  isCorrect  Boolean
}
